import os
import sys
import discord
from discord.ext import commands
from discord import app_commands
import requests
import time
import json
import os
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import datetime

# NOTE: per request, token is stored directly in code (not recommended for production).
TOKEN = ""

# Configure these to your guild/channel
GUILD_ID =        # ID —Å–µ—Ä–≤–µ—Ä–∞ (int)
CHANNEL_ID =      # –ö–∞–Ω–∞–ª, –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å "–±–æ—Ç –æ–Ω–ª–∞–π–Ω" (int)

# Intents: ensure guilds/messages are enabled so the bot can find channels
intents = discord.Intents.default()
intents.guilds = True
intents.messages = True
bot = commands.Bot(command_prefix="!", intents=intents)


### ---------- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö (Investing.com) ----------
def get_forex_data(period="today"):
    """Parse investing.com calendar for today/tomorrow/week. Returns dict: {'events': [...], 'error': str|None}"""
    import requests
    from bs4 import BeautifulSoup
    from datetime import datetime, timedelta
    url = "https://www.investing.com/economic-calendar/"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept-Language": "en-US,en;q=0.9"
    }
    try:
        r = requests.get(url, headers=headers, timeout=15)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        rows = soup.select("tr.js-event-item")
        events = []
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)
        week_dates = [today + timedelta(days=i) for i in range(7)]
        for row in rows:
            # Date/time
            time_cell = row.select_one("td.time")
            time_str = time_cell.get_text(strip=True) if time_cell else ""
            # Country
            country_cell = row.select_one("td.flag")
            country = country_cell.get("title") if country_cell and country_cell.get("title") else ""
            # Impact
            impact_cell = row.select_one("td.sentiment")
            impact = impact_cell.get("data-img_key") if impact_cell and impact_cell.get("data-img_key") else "Low"
            # Title
            event_cell = row.select_one("td.event")
            title = event_cell.get_text(strip=True) if event_cell else "No title"
            # Forecast/Previous/Actual
            forecast_cell = row.select_one("td.forecast")
            forecast = forecast_cell.get_text(strip=True) if forecast_cell else "‚Äî"
            previous_cell = row.select_one("td.previous")
            previous = previous_cell.get_text(strip=True) if previous_cell else "‚Äî"
            actual_cell = row.select_one("td.actual")
            actual = actual_cell.get_text(strip=True) if actual_cell else "‚Äî"
            # Date logic
            date_cell = row.select_one("td.date")
            date_str = date_cell.get_text(strip=True) if date_cell else ""
            event_date = today
            if date_str:
                try:
                    event_date = datetime.strptime(date_str, "%b %d, %Y").date()
                except Exception:
                    event_date = today
            # Filter by period
            if period == "today" and event_date != today:
                continue
            if period == "tomorrow" and event_date != tomorrow:
                continue
            if period == "week" and event_date < today:
                continue
            if period == "week" and event_date > today + timedelta(days=6):
                continue
            events.append({
                "date": str(event_date),
                "time": time_str,
                "impact": impact,
                "title": title,
                "country": country,
                "forecast": forecast if forecast else "‚Äî",
                "previous": previous if previous else "‚Äî",
                "actual": actual if actual else "‚Äî",
            })
        return {"events": events, "error": None}
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ investing.com:", e)
        return {"events": [], "error": str(e)}


# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Embed ----------
def format_forex_embed(period, data):
    embed = discord.Embed(
        title=f"üìä Forex News {period.capitalize()}",
        color=discord.Color.blurple(),
        timestamp=datetime.datetime.utcnow()
    )

    if not data:
        embed.description = "‚ùå –ù–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        return embed

    # Group by impact (from investing.com: bull1, bull2, bull3)
    impact_map = {
        "bull3": "üî¥ High impact",
        "bull2": "üü† Medium impact",
        "bull1": "üü¢ Low impact",
        "Low": "üü¢ Low impact",
        "": "üü¢ Low impact"
    }
    grouped = {"bull3": [], "bull2": [], "bull1": []}

    for event in data:
        imp = event.get("impact", "bull1")
        if imp not in grouped:
            imp = "bull1"
        grouped[imp].append(event)

    def country_flag(code: str) -> str:
        # Try to convert country name to flag emoji (simple mapping for common cases)
        flags = {
            "United States": "üá∫üá∏", "Japan": "üáØüáµ", "United Kingdom": "üá¨üáß", "Germany": "üá©üá™", "France": "üá´üá∑", "Canada": "üá®üá¶", "Australia": "üá¶üá∫", "China": "üá®üá≥", "Switzerland": "üá®üá≠", "Euro Zone": "üá™üá∫"
        }
        return flags.get(code, "")

    for imp in ["bull3", "bull2", "bull1"]:
        events = grouped[imp]
        if not events:
            continue
        lines = []
        for e in events[:6]:
            flag = country_flag(e.get("country", ""))
            name = e.get("title", "No title")
            date = e.get("date", "")
            time = e.get("time", "")
            forecast = e.get("forecast", "‚Äî") or "‚Äî"
            previous = e.get("previous", "‚Äî") or "‚Äî"
            actual = e.get("actual", "‚Äî") or "‚Äî"
            # Always show all three stats, even if missing
            lines.append(f"{flag} **{name}**\nüìÖ {date} ‚Ä¢ üïí {time}\nüìä Actual: `{actual}` | Forecast: `{forecast}` | Previous: `{previous}`")
        embed.add_field(name=f"{impact_map.get(imp, imp)}", value="\n\n".join(lines), inline=False)

    embed.set_footer(text="Powered by Investing.com")
    return embed


# ---------- Slash-–∫–æ–º–∞–Ω–¥—ã ----------
@bot.tree.command(name="today", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ Forex –∑–∞ —Å–µ–≥–æ–¥–Ω—è", guild=discord.Object(id=GUILD_ID))
async def today(interaction: discord.Interaction):
    await interaction.response.defer()
    res = get_forex_data("today")
    if res.get('error') and not res.get('cached'):
        await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    data = res.get('events', [])
    embed = format_forex_embed("today", data)
    if res.get('cached'):
        embed.set_footer(text=(embed.footer.text + " ‚Äî (cached data)" if embed.footer and embed.footer.text else "(cached data)"))
    await interaction.followup.send(embed=embed)

@bot.tree.command(name="tomorrow", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ Forex –Ω–∞ –∑–∞–≤—Ç—Ä–∞", guild=discord.Object(id=GUILD_ID))
async def tomorrow(interaction: discord.Interaction):
    await interaction.response.defer()
    res = get_forex_data("tomorrow")
    if res.get('error') and not res.get('cached'):
        await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    data = res.get('events', [])
    embed = format_forex_embed("tomorrow", data)
    if res.get('cached'):
        embed.set_footer(text=(embed.footer.text + " ‚Äî (cached data)" if embed.footer and embed.footer.text else "(cached data)"))
    await interaction.followup.send(embed=embed)

@bot.tree.command(name="week", description="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ Forex –Ω–∞ –Ω–µ–¥–µ–ª—é", guild=discord.Object(id=GUILD_ID))
async def week(interaction: discord.Interaction):
    await interaction.response.defer()
    res = get_forex_data("week")
    if res.get('error') and not res.get('cached'):
        await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    data = res.get('events', [])
    embed = format_forex_embed("week", data)
    if res.get('cached'):
        embed.set_footer(text=(embed.footer.text + " ‚Äî (cached data)" if embed.footer and embed.footer.text else "(cached data)"))
    await interaction.followup.send(embed=embed)


# ---------- –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ ----------
@bot.event
async def on_ready():
    print(f"‚úÖ {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        synced = await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", e)
    # Try to get channel from cache first, otherwise fetch from API
    try:
        channel = bot.get_channel(CHANNEL_ID)
        if channel is None:
            channel = await bot.fetch_channel(CHANNEL_ID)
        if channel:
            await channel.send("üü¢ **Economic Calendar** –∑–∞–ø—É—â–µ–Ω –∏ –æ–Ω–ª–∞–π–Ω!")
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:", e)


# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == '__main__':
    bot.run(TOKEN)
